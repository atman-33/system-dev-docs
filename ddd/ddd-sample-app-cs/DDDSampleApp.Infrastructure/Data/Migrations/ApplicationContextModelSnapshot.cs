// <auto-generated />
using System;
using DDDSampleApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DDDSampleApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("DDDSampleApp.Infrastructure.Entities.MemberEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("position");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Position")
                        .IsUnique();

                    b.ToTable("members");

                    b.HasData(
                        new
                        {
                            Id = "90f77859-d713-46d9-9a82-8bb21bd66256",
                            CreatedAt = new DateTime(2024, 8, 7, 21, 57, 51, 86, DateTimeKind.Local).AddTicks(3417),
                            Name = "Aさん",
                            Position = "リーダー",
                            UpdatedAt = new DateTime(2024, 8, 7, 21, 57, 51, 86, DateTimeKind.Local).AddTicks(3431)
                        },
                        new
                        {
                            Id = "a11711e1-c2f1-41e9-a0d3-cc76464ff77d",
                            CreatedAt = new DateTime(2024, 8, 7, 21, 57, 51, 86, DateTimeKind.Local).AddTicks(3435),
                            Name = "Bさん",
                            Position = "メンバー",
                            UpdatedAt = new DateTime(2024, 8, 7, 21, 57, 51, 86, DateTimeKind.Local).AddTicks(3436)
                        });
                });

            modelBuilder.Entity("DDDSampleApp.Infrastructure.Entities.TodoEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("TEXT")
                        .HasColumnName("deadline");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("member_id");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<string>("TodoTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("todo_type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TodoTypeId");

                    b.ToTable("todos");
                });

            modelBuilder.Entity("DDDSampleApp.Infrastructure.Entities.TodoTypeEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("todo_types");

                    b.HasData(
                        new
                        {
                            Id = "728014d6-96c1-4020-901e-61a541ea3967",
                            CreatedAt = new DateTime(2024, 8, 7, 21, 57, 51, 86, DateTimeKind.Local).AddTicks(3481),
                            Name = "プライベート",
                            UpdatedAt = new DateTime(2024, 8, 7, 21, 57, 51, 86, DateTimeKind.Local).AddTicks(3481)
                        },
                        new
                        {
                            Id = "78920b8b-ae53-44e5-8c99-d17dffe67790",
                            CreatedAt = new DateTime(2024, 8, 7, 21, 57, 51, 86, DateTimeKind.Local).AddTicks(3484),
                            Name = "仕事",
                            UpdatedAt = new DateTime(2024, 8, 7, 21, 57, 51, 86, DateTimeKind.Local).AddTicks(3485)
                        });
                });

            modelBuilder.Entity("DDDSampleApp.Infrastructure.Entities.TodoEntity", b =>
                {
                    b.HasOne("DDDSampleApp.Infrastructure.Entities.MemberEntity", "Member")
                        .WithMany("Todos")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDDSampleApp.Infrastructure.Entities.TodoTypeEntity", "TodoType")
                        .WithMany()
                        .HasForeignKey("TodoTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("TodoType");
                });

            modelBuilder.Entity("DDDSampleApp.Infrastructure.Entities.MemberEntity", b =>
                {
                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
